#!/usr/bin/env python3
# reference: https://wiki.debian.org/DebianRepository/Format
# TODO: handle diff

from __future__ import annotations
from argparse import ArgumentParser
from debian.deb822 import Release, Sources, Packages, PdiffIndex
from pathlib import Path
from typing import Tuple, TypedDict, Optional
import requests
import sqlite3
import lzma
import hashlib
import csv

parser = ArgumentParser(prog="debian-release")
parser.add_argument("--uri", default="https://mirrors.tuna.tsinghua.edu.cn/debian")
parser.add_argument("--output", required=True)
parser.add_argument("dists", nargs="+")
args = parser.parse_args()


class Entry:
    def __init__(self, filename: Path, sha256: str):
        self.filename = filename
        self.sha256 = sha256

    def __repr__(self):
        return f"Entry({self.filename}, {self.sha256})"

    def byhash(self) -> Entry:
        return Entry(
            self.filename.parent.joinpath("by-hash", "SHA256", self.sha256), self.sha256
        )


def sha256sum(data: bytes) -> str:
    hasher = hashlib.sha256()
    hasher.update(data)
    return hasher.hexdigest()


def fetch(uri: str, entry: Entry) -> bytes:
    resp = requests.get(f"{uri}/{entry.filename}")
    resp.raise_for_status()

    digest = sha256sum(resp.content)

    if entry.sha256 != digest:
        raise Exception("hash mismatch")

    return resp.content


def register(cur: sqlite3.Cursor, entries: list[Entry]):
    cur.executemany(INSERT, [(str(entry.filename), entry.sha256) for entry in entries])


def inrelease(cur: sqlite3.Cursor, uri: str, dist: str) -> list[Entry]:
    # The file "dists/$DIST/InRelease" shall contain meta-information about the distribution and checksums for the indices
    filename = Path("dists", dist, "InRelease")

    file = requests.get(f"{uri}/{filename}")
    file.raise_for_status()

    # TODO: verify OpenPGP signature
    register(cur, [Entry(filename, sha256sum(file.content))])

    release = Release(file.content)
    if release["Acquire-By-Hash"] != "yes":
        raise Exception("Acquire-By-Hash support is required")

    data = [
        Entry(filename.parent.joinpath(file["name"]), file["sha256"])
        for file in release["SHA256"]
    ]
    register(cur, data)

    return data


def installer(cur: sqlite3.Cursor, uri: str, entry: Entry):
    content = fetch(uri, entry)
    data = [
        Entry(entry.filename.parent.joinpath(row[2]), row[0])
        for row in csv.reader(content.decode("utf-8").splitlines(), delimiter=" ")
    ]
    register(cur, data)


def diff(cur: sqlite3.Cursor, uri: str, entry: Entry):
    byhash = entry.byhash()
    register(cur, [byhash])

    content = fetch(uri, byhash)

    for para in PdiffIndex.iter_paragraphs(content, use_apt_pkg=False):
        data = [
            Entry(
                entry.filename.parent.joinpath(file["filename"]),
                file["SHA256"],
            )
            for file in para["SHA256-Download"]
        ]
        register(cur, data)


def sources(cur: sqlite3.Cursor, uri: str, entry: Entry):
    byhash = entry.byhash()
    register(cur, [byhash])

    content = fetch(args.uri, byhash)

    for para in Sources.iter_paragraphs(lzma.decompress(content), use_apt_pkg=False):
        directory = Path(para["Directory"])
        data = [
            Entry(directory.joinpath(file["name"]), file["sha256"])
            for file in para["Checksums-Sha256"]
        ]
        register(cur, data)


def packages(cur: sqlite3.Cursor, uri: str, entry: Entry):
    byhash = entry.byhash()
    register(cur, [byhash])

    content = fetch(args.uri, byhash)

    data = [
        Entry(Path(file["Filename"]), file["SHA256"])
        for file in Packages.iter_paragraphs(
            lzma.decompress(content), use_apt_pkg=False
        )
    ]
    register(cur, data)


# open database connection
con = sqlite3.connect(args.output)
cur = con.cursor()
# create mapping table
cur.execute("CREATE TABLE files(filename TEXT PRIMARY KEY, sha256 TEXT)")
INSERT = "INSERT OR IGNORE INTO files VALUES (?, ?)"

for dist in args.dists:
    release = inrelease(cur, args.uri, dist)

    # handle toplevel files
    for entry in release:
        match entry.filename.name:
            case (
                # legacy per-component-and-architecture Release files
                "Release"
                | "Packages"
                | "Sources"
                # already handled by their sha256 counterparts
                | "MD5SUMS"
            ):
                pass
            case "Packages.gz" | "Sources.gz":
                register(cur, [entry.byhash()])
            # installer image sums
            case "SHA256SUMS":
                installer(cur, args.uri, entry)
            case "Index":
                diff(cur, args.uri, entry)
            case "Sources.xz":
                sources(cur, args.uri, entry)
            case "Packages.xz":
                packages(cur, args.uri, entry)
            case _:
                # "Contents" indices
                if entry.filename.name.startswith("Contents"):
                    pass
                # "Translation" indices
                elif entry.filename.name.startswith("Translation"):
                    pass
                # https://wiki.debian.org/DEP-11
                elif entry.filename.name.startswith("Components"):
                    pass
                elif entry.filename.name.startswith("icons"):
                    pass
                else:
                    raise Exception("unhandled file")
con.commit()
con.close()
