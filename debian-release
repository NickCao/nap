#!/usr/bin/env python3
# reference: https://wiki.debian.org/DebianRepository/Format

from argparse import ArgumentParser
from requests import get
from debian.deb822 import Release, Packages
import sqlite3
import lzma
import hashlib

parser = ArgumentParser(prog="debian-release")
parser.add_argument("--uri", default="https://mirrors.tuna.tsinghua.edu.cn/debian")
parser.add_argument("--distribution", default="bookworm")
parser.add_argument("--output", required=True)
args = parser.parse_args()

# open database connection
con = sqlite3.connect(args.output)
cur = con.cursor()
# create mapping table
cur.execute("CREATE TABLE files(filename TEXT PRIMARY KEY, sha256 TEXT)")
INSERT = "INSERT OR IGNORE INTO files VALUES (?, ?)"
# fetch release
# TODO: verify gpg signature
r = get(f"{args.uri}/dists/{args.distribution}/InRelease")
r.raise_for_status()
n = hashlib.sha256()
n.update(r.content)
cur.execute(INSERT, (f"dists/{args.distribution}/InRelease", n.hexdigest()))
release = Release(r.text)
# TODO: handle legacy mirrors
assert release["Acquire-By-Hash"] == "yes"
# handle toplevel files
for entry in release["SHA256"]:
    cur.execute(INSERT, (f'dists/{args.distribution}/{entry["name"]}', entry["sha256"]))
    # handle packages
    for component in release["Components"].split(" "):
        for architecture in release["Architectures"].split(" "):
            if entry["name"] == f"{component}/binary-{architecture}/Packages.xz":
                byhash = f'dists/{args.distribution}/{component}/binary-{architecture}/by-hash/SHA256/{entry["sha256"]}'
                cur.execute(INSERT, (byhash, entry["sha256"]))
                p = get(f"{args.uri}/{byhash}")
                p.raise_for_status()
                m = hashlib.sha256()
                m.update(p.content)
                assert m.hexdigest() == entry["SHA256"]
                data = [
                    (package["Filename"], package["SHA256"])
                    for package in Packages.iter_paragraphs(
                        lzma.decompress(p.content), use_apt_pkg=False
                    )
                ]
                cur.executemany(INSERT, data)
con.commit()
con.close()
