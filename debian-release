#!/usr/bin/env python3
# reference: https://wiki.debian.org/DebianRepository/Format

from argparse import ArgumentParser
from debian.deb822 import Release, Packages
import requests
import sqlite3
import lzma
import hashlib

parser = ArgumentParser(prog="debian-release")
parser.add_argument("--uri", default="https://mirrors.tuna.tsinghua.edu.cn/debian")
parser.add_argument("--output", required=True)
parser.add_argument("distributions", nargs="+")
args = parser.parse_args()


def fetch(uri, filename):
    resp = requests.get(f"{uri}/{filename}")
    resp.raise_for_status()

    sha256 = hashlib.sha256()
    sha256.update(resp.content)

    return resp.content, sha256.hexdigest()


# open database connection
con = sqlite3.connect(args.output)
cur = con.cursor()
# create mapping table
cur.execute("CREATE TABLE files(filename TEXT PRIMARY KEY, sha256 TEXT)")
INSERT = "INSERT OR IGNORE INTO files VALUES (?, ?)"

for distribution in args.distributions:
    # fetch release
    # TODO: verify gpg signature
    inrelease = f"dists/{distribution}/InRelease"
    r, n = fetch(args.uri, inrelease)
    cur.execute(INSERT, (inrelease, n))
    release = Release(r)
    # TODO: handle legacy mirrors
    assert release["Acquire-By-Hash"] == "yes"

    # handle toplevel files
    for entry in release["SHA256"]:
        cur.execute(INSERT, (f'dists/{distribution}/{entry["name"]}', entry["sha256"]))
        # handle packages
        for component in release["Components"].split(" "):
            for architecture in release["Architectures"].split(" "):
                if entry["name"] == f"{component}/binary-{architecture}/Packages.xz":
                    byhash = f'dists/{distribution}/{component}/binary-{architecture}/by-hash/SHA256/{entry["sha256"]}'
                    cur.execute(INSERT, (byhash, entry["sha256"]))
                    p, m = fetch(args.uri, byhash)
                    assert m == entry["SHA256"]
                    data = [
                        (package["Filename"], package["SHA256"])
                        for package in Packages.iter_paragraphs(
                            lzma.decompress(p), use_apt_pkg=False
                        )
                    ]
                    cur.executemany(INSERT, data)
con.commit()
con.close()
