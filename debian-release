#!/usr/bin/env python3
# reference: https://wiki.debian.org/DebianRepository/Format
# TODO: handle diff

from argparse import ArgumentParser
from debian.deb822 import Release, Sources, Packages, PdiffIndex
from pathlib import Path
from typing import Tuple
import requests
import sqlite3
import lzma
import hashlib
import csv

parser = ArgumentParser(prog="debian-release")
parser.add_argument("--uri", default="https://mirrors.tuna.tsinghua.edu.cn/debian")
parser.add_argument("--output", required=True)
parser.add_argument("distributions", nargs="+")
args = parser.parse_args()


def fetch(uri: str, filename: Path, sha256: str | None = None) -> Tuple[bytes, str]:
    resp = requests.get(f"{uri}/{filename}")
    resp.raise_for_status()

    hasher = hashlib.sha256()
    hasher.update(resp.content)
    digest = hasher.hexdigest()

    if (sha256 is not None) and (sha256 != digest):
        raise Exception("hash mismatch")

    return resp.content, digest


# open database connection
con = sqlite3.connect(args.output)
cur = con.cursor()
# create mapping table
cur.execute("CREATE TABLE files(filename TEXT PRIMARY KEY, sha256 TEXT)")
INSERT = "INSERT OR IGNORE INTO files VALUES (?, ?)"

for distribution in args.distributions:
    # The file "dists/$DIST/InRelease" shall contain meta-information about the distribution and checksums for the indices
    inrelease = Path("dists", distribution, "InRelease")
    r, n = fetch(args.uri, inrelease)
    cur.execute(INSERT, (str(inrelease), n))
    release = Release(r)
    # TODO: handle legacy mirrors
    assert release["Acquire-By-Hash"] == "yes"

    # handle toplevel files
    for entry in release["SHA256"]:
        fullpath = inrelease.parent.joinpath(entry["name"])
        cur.execute(INSERT, (str(fullpath), entry["sha256"]))
        match fullpath.name:
            case (
                # legacy per-component-and-architecture Release files
                "Release"
                # already handled by their xz counterparts
                | "Packages"
                | "Packages.gz"
                | "Sources"
                | "Sources.gz"
                # already handled by their sha256 counterparts
                | "MD5SUMS"
            ):
                pass
            # installer image sums
            case "SHA256SUMS":
                p, _ = fetch(args.uri, fullpath, entry["SHA256"])
                for row in csv.reader(p.decode("utf-8").splitlines(), delimiter=" "):
                    cur.execute(INSERT, (str(fullpath.parent.joinpath(row[2])), row[0]))
            case "Index":
                byhash = fullpath.parent.joinpath("by-hash", "SHA256", entry["sha256"])
                cur.execute(INSERT, (str(byhash), entry["sha256"]))
                p, _ = fetch(args.uri, byhash, entry["SHA256"])
                for diff in PdiffIndex.iter_paragraphs(p, use_apt_pkg=False):
                    data = [
                        (
                            str(fullpath.parent.joinpath(file["filename"])),
                            file["SHA256"],
                        )
                        for file in diff["SHA256-Download"]
                    ]
                    cur.executemany(INSERT, data)
            case "Sources.xz":
                byhash = fullpath.parent.joinpath("by-hash", "SHA256", entry["sha256"])
                cur.execute(INSERT, (str(byhash), entry["sha256"]))
                p, _ = fetch(args.uri, byhash, entry["SHA256"])
                for source in Sources.iter_paragraphs(
                    lzma.decompress(p), use_apt_pkg=False
                ):
                    directory = Path(source["Directory"])
                    data = [
                        (str(directory.joinpath(file["name"])), file["sha256"])
                        for file in source["Checksums-Sha256"]
                    ]
                    cur.executemany(INSERT, data)
            case "Packages.xz":
                byhash = fullpath.parent.joinpath("by-hash", "SHA256", entry["sha256"])
                cur.execute(INSERT, (str(byhash), entry["sha256"]))
                p, _ = fetch(args.uri, byhash, entry["SHA256"])
                data = [
                    (package["Filename"], package["SHA256"])
                    for package in Packages.iter_paragraphs(
                        lzma.decompress(p), use_apt_pkg=False
                    )
                ]
                cur.executemany(INSERT, data)
            case _:
                # "Contents" indices
                if fullpath.name.startswith("Contents"):
                    pass
                # "Translation" indices
                elif fullpath.name.startswith("Translation"):
                    pass
                # https://wiki.debian.org/DEP-11
                elif fullpath.name.startswith("Components"):
                    pass
                elif fullpath.name.startswith("icons"):
                    pass
                else:
                    raise Exception("unhandled file")
con.commit()
con.close()
